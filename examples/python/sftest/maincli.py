#Generated by RIDLC, make sure to backup before running RIDLC again
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from sfteststructs import *
import errno

from FileTransfercli import CFileTransferProxy
import os
import time
import hashlib
import sys

def GetMD5(strPath : str ) :
    md5Hash = hashlib.md5()
    with open(strPath,"rb") as f:
        # read contents of the file
        for byteBlock in iter(lambda:f.read(4096),b""):
            md5Hash.update(byteBlock)
    return md5Hash.hexdigest()

def UsageAndQuit():
    print( "usage: {} <filename>".format(sys.argv[0]))
    quit(errno.EINVAL)

def maincli() :
    ret = 0
    oContext = PyRpcContext( 'PyRpcProxy' )
    with oContext :
        print( "start to work here..." )
        strPath_ = os.path.dirname( os.path.realpath( __file__ ) )
        strPath_ += '/sftestdesc.json'
        oProxy = CFileTransferProxy( oContext.pIoMgr,
            strPath_, 'FileTransfer' )
        ret = oProxy.GetError()
        if ret < 0 :
            return ret
        
        if len(sys.argv) - 1 != 1 :
            UsageAndQuit()
        
        strFile = sys.argv[1]
        if not ( os.path.exists(strFile) and
            os.path.isfile(strFile) and
            os.path.getsize(strFile) > 0 ):
            print("Not a valid file")
            UsageAndQuit()

        with oProxy :
            while True:
                state = oProxy.oInst.GetState()
                while state == cpp.stateRecovery :
                    time.sleep( 1 )
                    state = oProxy.oInst.GetState()
                if state != cpp.stateConnected :
                    return ErrorCode.ERROR_STATE
                
                OutputMsg("Open stream channel...")
                hChannel = oProxy.StartStream()
                if hChannel == ErrorCode.INVALID_HANDLE:
                    ret = -errno.EFAULT
                    break
                
                pret = oProxy.ReadStream(hChannel)
                if(pret[0] < 0):
                    ret = pret[0]
                    break
                byToken = pret[1]
                if byToken.decode() != "rdy" :
                    ret = -ErrorCode.ERROR_FAIL
                    break

                OutputMsg("Streaming channel open successfully")
                OutputMsg("uploading file...")

                ret = oProxy.UploadFile(hChannel, strFile)
                if ret < 0:
                    break

                if ret == ErrorCode.STATUS_PENDING:
                    oProxy.m_oTransCtx.WaitForComplete()

                ret = oProxy.m_oTransCtx.GetError(hChannel)
                if ret < 0:
                    break

                # wait for a complete notify from server
                pret = oProxy.ReadStream(hChannel)
                if pret[0] < 0 :
                    ret = pret[0]
                    break

                byToken = pret[1]
                if byToken.decode() != "over" :
                    ret = ErrorCode.ERROR_FAIL
                    break

                OutputMsg("UploadFile completed")
                oProxy.m_oTransCtx.RemoveContext(hChannel)

                strBaseName = os.path.basename(strFile)
                OutputMsg( "Getting info of file '%s' from server " % strBaseName )

                pret = oProxy.GetFileInfo(strBaseName)
                if pret[0] < 0:
                    ret = pret[0]
                    break

                fi = pret[1][0]
                OutputMsg("Downloading file %s ..." % strBaseName)

                ret = oProxy.DownloadFile(
                    hChannel, strBaseName, 0, fi.qwSize)

                if ret < 0:
                    break
                elif ret == ErrorCode.STATUS_PENDING:
                    oProxy.m_oTransCtx.WaitForComplete()

                ret = oProxy.m_oTransCtx.GetError(hChannel)
                if ret < 0:
                    break
                    
                OutputMsg("DownloadFile completed")
                origMd5 = GetMD5(strFile)
                downMd5 = GetMD5("./" + strBaseName + ".1")
                if origMd5 is None or downMd5 is None:
                    ret = ErrorCode.ERROR_FAIL
                    break

                if origMd5 != downMd5:
                    OutputMsg("The file contents are not the same")
                    ret = ErrorCode.ERROR_FAIL
                    break
                OutputMsg("MD5 check passed, sftest completed")

                pret = oProxy.RemoveFile(strBaseName)
                if pret[0] < 0:
                    OutputMsg("Removing remote file failed")
                else:
                    OutputMsg("Removed the remote file")

                os.remove("./" + strBaseName + ".1")
                OutputMsg( "Removed the local temporary file")
                break
        

    return ret
    
ret = maincli()
sys.exit( -ret )
