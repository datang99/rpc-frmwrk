#Generated by RIDLC, make sure to backup before running RIDLC again
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from actcancelstructs import *
import errno

from ActiveCancelsvrbase import *
class CIActiveCancelsvr( IIActiveCancel_SvrImpl ):

    def LongWaitCb( self, context ) :
        callback = context[ 0 ]
        strText = context[ 1 ]
        OnLongWaitComplete
            callback, 0, strText );
        return
    '''
    Asynchronous request handler
    '''
    def LongWait( self, oReqCtx : PyReqContext,
        i0 : str
        ) -> Tuple[ int, list ] :
        '''
        the response parameters includes
        i0r : str
        '''
        #Implement this method here

        #schedule a timer to complete this request
        #in 2 seconds

        context = [ callback, strText ]
        ret = self.AddTimer( 30,
            CActcServer.LongWaitCb,
            context )
        if ret[ 0 ] < 0 :
            return [ ret[ 0 ],  ]

        timerObj = ret[ 1 ]
        return [ 65537, ]
        
    '''
    This method is called when the async
    request is cancelled due to timeout
    or user request. Add your own cleanup
    code here
    '''
    def OnLongWaitCanceled( self,
        oReqCtx : PyReqContext, iRet : int,
        i0 : str ):
        pass
        
    
class CActiveCancelServer(
    CIActiveCancelsvr,
    PyRpcServer ) :
    def __init__( self, pIoMgr, strDesc, strObjName ) :
        PyRpcServer.__init__( self,
            pIoMgr, strDesc, strObjName )
