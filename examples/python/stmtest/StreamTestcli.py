#Generated by RIDLC, make sure to backup before running RIDLC again
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from stmteststructs import *
import threading as tr
import errno

from StreamTestclibase import *

class CIStreamTestcli( IIStreamTest_CliImpl ):
    
    def __init__( self ) :
        self.sem = tr.Semaphore( 0 )

    '''override callback for async stream read
    '''
    def WriteStmCallback( self, iRet : int, hChannel : int, pBuf : bytearray ) :
        self.SetError( iRet )
        if iRet < 0 :
            print( "WriteStreamAsync2 failed with error " + iRet )
            self.sem.release()
            return
        self.NotifyComplete()

    '''override callback for async stream write
    '''
    def ReadStmCallback( self, iRet : int, hChannel : int, pBuf : bytearray ) :
        self.SetError( iRet )
        if iRet < 0 :
            print( "ReadStreamAsync2 failed with error " + str( iRet ) )
            self.sem.release()
            return
        print( "Server says( async ): " + pBuf.decode() )
        self.NotifyComplete()

    def WaitForComplete( self ) :
        self.sem.acquire()

    def NotifyComplete( self ) :
        self.sem.release()

class CStreamTestProxy(
    CIStreamTestcli,
    PyRpcProxy ) :
    def __init__( self, pIoMgr, strDesc, strObjName ) :
        CIStreamTestcli.__init__( self )
        PyRpcProxy.__init__( self,
            pIoMgr, strDesc, strObjName )
