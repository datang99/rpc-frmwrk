#made changes to the following variables for different target
ARCH :=
BUILD_64:=1

ifeq ($(ARCH),arm)
	ARCH_STR := arm-linux-gnueabihf
	CROSS_COMPILE := $(ARCH_STR)-
	CROSS:= $(CROSS_COMPILE)
	ROOTFS := $(HOME)/mywork/raspberry/rootfs
	DIR_SUFFIX_ARCH := /$(ARCH_STR)
endif

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
BASE:=$(abspath $(dir $(mkfile_path)).. )

CC := $(CROSS_COMPILE)gcc
CPP := $(CROSS_COMPILE)g++
LD := $(CROSS_COMPILE)ld
AR := $(CROSS_COMPILE)ar
AS := $(CROSS_COMPILE)as
STRIP := $(CROSS_COMPILE)strip
CUR_DIR := $(shell pwd)

C_FLAGS := $(CFLAGS) -Wall -c -D_GNU_SOURCE -pthread
C_DEFINES :=

DEBUG_FLAGS := -D_DEBUG=1 -DDEBUG -ggdb
RELEASE_FLAGS := -D_DEBUG=0 -DRELEASE -O2 -ggdb

ifeq ($(BUILD_64),1)
	WIDTH_FLAG := -m64
	LIB_DIR := lib64
	DBG_DIR := debug64
	RLS_DIR := release64
else ifeq ($(BUILD_64),0)
	WIDTH_FLAG := -m32
	LIB_DIR := lib
	DBG_DIR := debug
	RLS_DIR := release
endif

USER_LIB_PREFIX := $(ROOTFS)/usr/$(LIB_DIR)$(DIR_SUFFIX_ARCH)
LIB_PREFIX := $(ROOTFS)/$(LIB_DIR)$(DIR_SUFFIX_ARCH)

C_INCLUDE := -I$(BASE)/include \
	-I$(BASE)/ipc \
	-I$(BASE)/rpc \
	-I$(ROOTFS)/usr/include/glib-2.0 \
	-I$(USER_LIB_PREFIX)/glib-2.0/include \
	-I$(ROOTFS)/usr/include/dbus-1.0 \
	-I$(USER_LIB_PREFIX)/dbus-1.0/include \

ifeq ($(ARCH),arm)
	WIDTH_FLAG := -marm
	C_INCLUDE += -I$(ROOTFS)/usr/include$(DIR_SUFFIX_ARCH) \
		-I$(ROOTFS)/usr/include/jsoncpp \
		-I$(ROOTFS)/usr/include/ \

	C_DEFINES += -DARM
#-D_GLIBCXX_USE_CXX11_ABI=1
endif

CPP_FLAGS := $(CPPFLAGS) -D_USE_LIBEV=1 -std=c++11 $(WIDTH_FLAG) -Wno-psabi
LINKER_OPTION := $(WIDTH_FLAG) -L$(USER_LIB_PREFIX) -L$(LIB_PREFIX) -lipc -lcombase -Wl,-rpath=$(USER_LIB_PREFIX) -Wl,-rpath=$(LIB_PREFIX) -ldbus-1 -lcppunit -ljsoncpp -lstdc++ -ldl -lpthread

ifeq ($(ARCH),arm)
LINKER_OPTION += --sysroot=$(ROOTFS)
endif

OUTPUT_DIR := $(BASE)/test/$(DBG_DIR)
RPCLIB_DIR := $(BASE)/$(DBG_DIR)
OBJ_DIR:=./$(DBG_DIR)

ifeq ($(MAKECMDGOALS),) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),$(DBG_DIR)) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),all) 
	C_FLAGS += $(DEBUG_FLAGS)
endif

ifeq ($(MAKECMDGOALS),release)
	C_FLAGS += $(RELEASE_FLAGS)
	C_DEFINES += $(C_DEFINES) -DPRODUCTION 
	OUTPUT_DIR := $(BASE)/test/$(RLS_DIR)
	RPCLIB_DIR := $(BASE)/$(RLS_DIR)
	OBJ_DIR := ./$(RLS_DIR)
else ifeq ($(MAKECMDGOALS),debug_clean)
	OUTPUT_DIR := $(BASE)/test/$(DBG_DIR)
	OBJ_DIR := ./$(DBG_DIR)
else ifeq ($(MAKECMDGOALS),release_clean)
	OUTPUT_DIR := $(BASE)/test/$(RLS_DIR)
	OBJ_DIR := ./$(RLS_DIR)
	RPCLIB_DIR := $(BASE)/$(RLS_DIR)
endif

ifeq ($(BUILD_64),1)
	C_FLAGS += -fPIC
else ifeq ($(ARCH), arm)
	C_FLAGS += -fPIC
endif

$(OBJ_DIR)/%.o : %.cpp
	@echo Building file: $@
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR);fi
	$(CPP) $(C_DEFINES) $(C_FLAGS) $(CPP_FLAGS) $(C_INCLUDE) -o $@ $<

$(OBJ_DIR)/%.d : %.cpp
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR);fi
	@$(CPP) $(C_DEFINES) $(C_FLAGS) $(CPP_FLAGS) $(C_INCLUDE) -MM $*.cpp > $@
	@mv -f $@ $@.tmp
	@sed -e 's|.*:|$(OBJ_DIR)/$*.o:|' < $@.tmp > $@
	@sed -e 's/.*://' -e 's/\\$$//' < $@.tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $@
	@rm -f $@.tmp

LINKER_OPTION += -L$(OUTPUT_DIR)
MUTE_CLEAN := 2>/dev/null || true
