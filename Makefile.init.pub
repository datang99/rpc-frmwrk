#PATH :=/usr/local/angstrom/arm/bin/:$(PATH)
#CROSS_COMPILE := arm-angstrom-linux-gnueabi-
CROSS:= $(CROSS_COMPILE)
ARCH := arm

CC := $(CROSS_COMPILE)gcc
CPP := $(CROSS_COMPILE)g++
LD := $(CROSS_COMPILE)ld
AR := $(CROSS_COMPILE)ar
AS := $(CROSS_COMPILE)as
STRIP := $(CROSS_COMPILE)strip
CUR_DIR := $(shell pwd)

C_FLAGS :=  -Wall -c -m32 -D_GNU_SOURCE -pthread
C_DEFINES :=

DEBUG_FLAGS := -DDEBUG -ggdb
RELEASE_FLAGS := -O2

C_INCLUDE := -I../include \
	-I/usr/include/glib-2.0 \
	-I/usr/lib/glib-2.0/include \
	-I/usr/include/dbus-1.0 \
	-I/usr/lib/dbus-1.0/include \
	-I/usr/include \

OUTPUT_DIR := ../debug
OBJ_DIR := ./debug

ifeq ($(MAKECMDGOALS),) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),debug) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),all) 
	C_FLAGS += $(DEBUG_FLAGS)
endif

ifeq ($(MAKECMDGOALS),release)
	C_FLAGS += $(RELEASE_FLAGS)
	C_DEFINES += $(C_DEFINES) -DPRODUCTION 
	OUTPUT_DIR := ../release
	OBJ_DIR := ./release
else ifeq ($(MAKECMDGOALS),debug_clean)
	OUTPUT_DIR := ../debug
	OBJ_DIR := ./debug
else ifeq ($(MAKECMDGOALS),release_clean)
	OUTPUT_DIR := ../release
	OBJ_DIR := ./release
endif

CPP_FLAGS := $(C_FLAGS) -std=c++11

LINKER_OPTION := -shared -m32 -ldl -lstdc++ -lpthread -L/usr/lib/ -Wl,-rpath=/user/lib -L/lib -Wl,-rpath=/lib -lglib-2.0 -ldbus-1 -ljsoncpp -ldbus-glib-1

MUTE_CLEAN := 2>/dev/null || true

$(OBJ_DIR)/%.o : %.cpp
	@echo Building file: $@
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR);fi
	$(CPP) $(C_DEFINES) $(C_FLAGS) $(CPP_FLAGS) $(C_INCLUDE) -o $@ $<

$(OBJ_DIR)/%.d : %.cpp
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR);fi
	@$(CPP) $(C_DEFINES) $(C_FLAGS) $(CPP_FLAGS) $(C_INCLUDE) -MM $*.cpp > $@
	@mv -f $@ $@.tmp
	@sed -e 's|.*:|$(OBJ_DIR)/$*.o:|' < $@.tmp > $@
	@sed -e 's/.*://' -e 's/\\$$//' < $@.tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $@
	@rm -f $@.tmp

