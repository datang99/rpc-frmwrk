# Generated by RIDLC, make sure to backup before recompile
# ridlc -spf -O . ../../../../examples/hellowld.ridl 
import sys
from rpcf import iolib
from rpcf import serijson
import errno
from rpcf.proxy import ErrorCode as Err
from typing import Union, Tuple, Optional
from HelloWorldstructs import *
from ifimpl import *
import os
import time
import threading
import select
from HelloWorldSvccli import CHelloWorldSvcProxy

def Usage() :
    print( "Usage: python3 maincli.py < SP1 Path > < SP2 Path >..." )
    print( "\t< SP1 path > is the path to the first service's service point. The order" )
    print( "\tof the < SP path > is the same as services declared in the ridl file" )
    
def maincli() :
    ret = 0
    error = 0
    oMsgThrd = None
    try:
        if len( sys.argv ) < 2 :
            Usage()
            return -errno.EINVAL
        num = 0
        if len( sys.argv ) >= 3 :
            num = int( sys.argv[ 2 ] )
        '''
        Note: this is a reference design
        you are encouraged to make changes
        for your own purpse
        '''
        
        print( "Start to work here..." )
        strSvcPt = sys.argv[ 1 ]
        oProxy = CHelloWorldSvcProxy(
            strSvcPt, num )
        
        '''
        adding your code here
        using 'HelloWorldSvc' as an example
        Calling a proxy method like
        reqId = 0x12345
        'oProxy.Echo( reqId, strText )'
        '''

        strText = "Hello, World!"
        reqId = 0x12345 + num * 0x100000
        iRet = oProxy.Echo( reqId, strText )
        if iRet[ 0 ] < 0 :
            error = iRet[ 0 ]
            raise Exception( "Echo failed with error %d" % error )

        print( "Echo completed with response %s" % iRet[ 1 ][ 0 ] )
        
    except Exception as err:
        print( err )
        if error < 0 :
            return error
        return -errno.EFAULT
    finally:
        if oMsgThrd is not None:
            oMsgThrd.SetExit()
            threading.Thread.join( oMsgThrd )
    return ret
    
ret = maincli()
quit( -ret )
