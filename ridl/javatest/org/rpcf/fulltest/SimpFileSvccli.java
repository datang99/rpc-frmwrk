// GENERATED BY RIDLC. MAKE SURE TO BACKUP BEFORE RE-COMPILING.
package org.rpcf.fulltest;
import org.rpcf.rpcbase.*;
import java.lang.String;
import java.util.concurrent.Semaphore;

public class SimpFileSvccli extends SimpFileSvcclibase
{
    public SimpFileSvccli( ObjPtr pIoMgr,
        String strDesc, String strSvrObj )
    { super( pIoMgr, strDesc, strSvrObj ); }
    
    // ITinyInterface::KAReq2 async callback
    public void onKAReq2Complete(
        Object oContext, int iRet )
    {
        rpcbase.JavaOutputMsg(
                String.format("KAReq2 is sent (%d)", iRet));
        return;
    }

    // IEchoThings::EchoTypedef async callback
    public void onEchoTypedefComplete(
        Object oContext, int iRet,
        OBJPTR[] stmr  )
    {
        // IEchoThings::EchoTypedef has completed
        // oContext is what has passed when the
        // request was sent. iRet is the status
        // code of the request. if RC.ERROR(iRet),
        // the request is failed, and the following
        // response parameters should be ignored.
        return;
    }
    
    // IEchoThings::EchoHandle async callback
    public void onEchoHandleComplete(
        Object oContext, int iRet,
        STMHANDLE stmr  )
    {
        // IEchoThings::EchoHandle has completed
        // oContext is what has passed when the
        // request was sent. iRet is the status
        // code of the request. if RC.ERROR(iRet),
        // the request is failed, and the following
        // response parameters should be ignored.
        return;
    }
    
    // IEchoThings::OnHelloWorld the event handler
    public void OnHelloWorld(
        JavaReqContext oReqCtx,
        String strMsg  )
    {
        // event IEchoThings::OnHelloWorld comes
        // make change here to handle the event
        rpcbase.JavaOutputMsg(strMsg);
        return;
    }
    
    
}
