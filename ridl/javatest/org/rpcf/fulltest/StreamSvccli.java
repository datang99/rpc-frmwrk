// GENERATED BY RIDLC. MAKE SURE TO BACKUP BEFORE RE-COMPILING.
package org.rpcf.fulltest;
import org.rpcf.rpcbase.*;
import java.util.Map;
import java.util.HashMap;
import java.lang.String;
import java.nio.ByteBuffer;
import java.util.concurrent.Semaphore;

public class StreamSvccli extends StreamSvcclibase
{
    public Semaphore m_sem = new Semaphore(0);
    public StreamSvccli( ObjPtr pIoMgr,
        String strDesc, String strSvrObj )
    { super( pIoMgr, strDesc, strSvrObj ); }
    
    // IFileTransfer::UploadFile async callback
    public void onUploadFileComplete(
        Object oContext, int iRet )
    {
        setError( iRet );
        m_sem.release();
        return;
    }
    
    // IFileTransfer::DownloadFile async callback
    public void onDownloadFileComplete(
        Object oContext, int iRet )
    {
        // IFileTransfer::DownloadFile has completed
        // oContext is what has passed when the
        // request was sent. iRet is the status
        // code of the request. if RC.ERROR(iRet),
        // the request is failed, and the following
        // response parameters should be ignored.
        setError( iRet );
        m_sem.release();
        return;
    }
    
    
}
