// must have statement
appname "example";

include "tinyif.ridl"

typedef array< string > STRARR;
typedef array< STRARR > STRMATRIX;
typedef array< array< string > > STRMATRIX2;
typedef int32 myint32;
typedef myint32 myint32_t;

struct FILE_INFO
{
    /* define the fileds here, with default value optionally*/
    string szFileName = "test.dat";
    uint64 fileSize = 0;
    bool bRead = true;
    bytearray fileHeader;
    STRMATRIX2 vecLines;
    map<int32, bytearray> vecBlocks;
};

// echo different type of information
interface IEchoThings
{
    // both proxy and server are asynchronous, that is return
    // STATUS_PENDING if the request is not complete yet
    Echo( string strText )
        returns ( string strResp ) ;

    // proxy side is asynchronous, while server side is synchronous
    EchoUnknown( bytearray pBuf )
        returns ( bytearray pResp );

    // proxy side is synchronous, while server side is asynchronous
    EchoCfg( ObjPtr pObj )
        returns ( ObjPtr pRespObj );

    // both sides are synchronous
    EchoMany ( int32 i1, int16 i2,
        int64 i3, float i4, double i5, string szText )
        returns ( int32 i1r, int16 i2r,
            int64 i3r, float i4r,
            double i5r, string szTextr );

    EchoStruct( FILE_INFO fi ) returns ( FILE_INFO fir );

    // a event from server to the proxy, response list is alway empty and the
    // server gets no feedback related to the proxy.
    [ event ]OnHelloWorld( string strMsg ) returns ();
};

/*
*interface for file transfer
*/
interface IFileTransfer 
{
    UploadFile( string szFilePath,
        HSTREAM hChannel, uint64 offset,
        uint64 size )
        /*
        * although nothing listed in the response
        * list, an error code will always be
        * returned.
        */
        returns ();

    GetFileInfo(
        string szFileName, bool bRead )
        returns  ( FILE_INFO fi );

    DownloadFile( string szFileName,
        HSTREAM hChannel, uint64 offset,
        uint64 size )
        returns ();
};

interface IChat
{
    SpecifyChannel( HSTREAM hChannel )
        returns();
};

service SimpFileSvc [
    timeout=120, rtpath="/",
    ssl, websock, compress,
    auth ]
{
    interface ITinyInterface;
    interface IEchoThings;
    interface IFileTransfer;
    interface IChat;
};
