TODO:
DONE    To implement CDBusProxyFdo 
DONE    To add IoCtlCompletion for CDBusLocalPdo, CDBusProxyPdo
DONE    To change the port-state filter in DispatchData, which is not right yet
DONE    To make sure the cached irp in portstat removed before the port stops

PDON    To Remove WaitForComplete in the StartPortsInternal and StopPortsInternal,
            and make them completely asynchronous --- partially done

DONE    To handle events from DBus system in the
        CDBusLocalPdo

DONE    To handle events from CRpcReqForwarder in the CDBusProxyPdo

DONE    To add SendData and FetchData support to
            all the ports

DONE    To change interface online/offline event to
            module online/offline event

DONE    To add code to scan the plugin directory
            to load class factories

DONE    To implement CProxyFdoDriver

DONE    To implement CDBusBusPort::CreateRpcProxyPdo

DONE    To supprt DBUS_MESSAGE_TYPE_ERROR message
            type

DONE    To add dynamic loading of a shared lib and
            obtain the class factory

PDON    To implement the pass through requests for specific port

PDON    To implement the get/set property request for a port at any state

DONE    To add the basic implementation for IGenericInterface including handling
        of the events from the connection points and interface state management

DONE    To implement the CIfIoReqTask::OnIrpComplete
DONE    To implement CInterfaceProxy::InvokeMethod for incoming signal

DONE    To implement CInterfaceServer::SendResponse for incoming request

DONE    To merge CIfServiceMsgTask and CIfStartRecvMsgTask to make servicing
        incoming request cancellable, especially canceling the listening IRP.

DONE    To fix the m_queMsgs issue in CInterfaceServer::InvokeMethod and
        CIfInvokeMethodTask, which cannot diffenciate the async request and
        queued requests very well, and causes errors
DONE    To add Loopback pdo as the child of CDBusBusPort
PDON    To support PAUSE/RESTART in the port stack

DONE    To implement CRpcReqForwarder::InvokeMethod for incoming ForwardRequest
DONE    To implement CRpcRemoteRelay::InvokeMethod for incoming ForwardRequest
DONE    To implement the match mechanism in the CRpcReqForwarder and CRpcRemoteRelay
        To enhance the CIfIoReqTask::OnCancel
        

DONE    To add TcpBusPort and CTcpStreamPdo
DONE    To add channel management on CTcpStreamPdo 

DONE    To add the CRpcTcpFido and its driver
        To review further the `OnCancel' support for tasks in iftasks.h

        To initiate a eventRmtModOffline notify
        from the interface-level request. The server side handler is in 
            CStmPdoListenCtrlReqTask::DispatchDataReceived

        To Add baseline interfaces to object
            Obj_IoManager

DONE    To implement CRpcReqForwarder and CRpcReqForwarderProxy

        To implement an administrative interfaces
            to Obj_IoManager to listen and process the dbus events

DONE    To add support to cancel ForwardRequest gracefully.( added a UserCancelRequest method on both proxy and server for this purpose )

DONE    To add Keep-alive support to the RPC protocol
        To add authentication support to the RPC framework

DONE    To add SetupReqIrp for CRpcTcpBridgeProxy and CRpcTcpBridge
DONE    To move the request handling logics from CStmPdoListenCtrlReqTask::DispatchDataReceived to the CRpcTcpBridge/Proxy's DoInvoke
DONE    To refact the interface for the irp's req data to the CTcpStreamPdo
DONE    To find a general solution for SendResponse and FillRespData, similiar to MFC's message map
DONE    To override StartEx for CRpcTcpBridge/CRpcTcpBridgeProxy

DONE    To implement WriteStream and ReadStream
DONE    To implement SendData and FetchData support for RPC interfaces.
DONE    To add support to cancel SendData/FetchData gracefully 

        To dispatch the Remote Server Offline/Online and Remote Module Offline/Online events from the CRpcTcpBridgeProxy to the CRpcReqForwarder

        To debug and test the ipc/rpc modules and write test code
