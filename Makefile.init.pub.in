#Set ARCH to `arm' for ARM target. This make file
#assumes you are running on a raspberry pi desktop
ARCH := @build_cpu@

SYSROOT:= $(patsubst yes,,$(patsubst no,,@with_sysroot@))

CPUSTR := $(patsubst arm%,arm,$(ARCH))
ifeq (arm,$(CPUSTR))
ARCH:=arm
endif

ifeq ($(ARCH),)
  ARCH:=x86
endif

#Set BUILD_64 to `0' for 32-bit target
#Note it does not work for 64-bit arm yet, always
#set to `0' for arm
BUILD_64:= 0

ifeq ($(ARCH),x86_64)
BUILD_64 := 1
ARCH := x86
else ifeq ($(ARCH),arm64)
BUILD_64 := 1
ARCH := arm
endif

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
BASE:=$(abspath $(dir $(mkfile_path)) )

#####
ifeq ($(ARCH),arm)
ifeq ($(BUILD_64),0)
	ARCH_STR := arm-linux-gnueabihf
else
	ARCH_STR := aarch64-linux-gnueabihf
endif
	CROSS_COMPILE := $(ARCH_STR)-
	CROSS:= $(CROSS_COMPILE)
	ROOTFS := $(SYSROOT)
	DIR_SUFFIX_ARCH := /$(ARCH_STR)
endif

CC := $(CROSS_COMPILE)gcc
CPP := $(CROSS_COMPILE)g++
LD := $(CROSS_COMPILE)ld
AR := $(CROSS_COMPILE)ar
AS := $(CROSS_COMPILE)as
STRIP := $(CROSS_COMPILE)strip
CUR_DIR := $(shell pwd)

C_FLAGS := $(CFLAGS) -Wall -c -D_GNU_SOURCE -pthread
#C_DEFINES :=

DEBUG_FLAGS := -D_DEBUG=1 -DDEBUG -ggdb
RELEASE_FLAGS := -D_DEBUG=0 -DRELEASE -O2 -ggdb

ifeq ($(BUILD_64),1)
ifeq ($(ARCH),x86)
	WIDTH_FLAG := -m64
endif
	LIB_DIR := lib64
	DBG_DIR := debug64
	RLS_DIR := release64
else ifeq ($(BUILD_64),0)
ifeq ($(ARCH),x86)
	WIDTH_FLAG := -m32
endif
	LIB_DIR := lib
	DBG_DIR := debug
	RLS_DIR := release
endif

ifneq ($(SYSROOT),)
PKGCONFIGPATH=$(shell find $(SYSROOT) -name pkgconfig | tr "\n" ":" )
else
PKGCONFIGPATH=$(shell find /usr/$(LIB_DIR) -name pkgconfig | tr "\n" ":")
endif

USER_LIB_PREFIX := $(ROOTFS)/usr/$(LIB_DIR)$(DIR_SUFFIX_ARCH)
LIB_PREFIX := $(ROOTFS)/$(LIB_DIR)$(DIR_SUFFIX_ARCH)

COMMON_INCLUDE:=$(shell PKG_CONFIG_PATH=$(PKGCONFIGPATH) pkg-config --define-variable=prefix=$(ROOTFS)/usr --cflags glib-2.0 dbus-1 jsoncpp openssl mit-krb5)

C_INCLUDE := -I$(BASE)/include \
	$(COMMON_INCLUDE) \
	-I$(ROOTFS)/usr/include @INCLUDES@

ifeq ($(ARCH),arm)
	WIDTH_FLAG := -marm
	SSLCONF:=$(dir $(shell dirname $$(find $(ROOTFS) -name opensslconf.h | head -n 1)))
	C_INCLUDE += -I$(SSLCONF)
	C_DEFINES += -DARM
#-D_GLIBCXX_USE_CXX11_ABI=1
endif

OUTPUT_DIR := $(BASE)/$(DBG_DIR)
OBJ_DIR := ./$(DBG_DIR)

ifeq ($(MAKECMDGOALS),) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),debug) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),$(DBG_DIR)) 
	C_FLAGS += $(DEBUG_FLAGS)
else ifeq ($(MAKECMDGOALS),all) 
	C_FLAGS += $(DEBUG_FLAGS)
endif

ifeq ($(MAKECMDGOALS),release)
	C_FLAGS += $(RELEASE_FLAGS)
	C_DEFINES += -DPRODUCTION 
	OUTPUT_DIR := $(BASE)/$(RLS_DIR)
	OBJ_DIR := ./$(RLS_DIR)
else ifeq ($(MAKECMDGOALS),debug_clean)
	OUTPUT_DIR := $(BASE)/$(DBG_DIR)
	OBJ_DIR := ./$(DBG_DIR)
else ifeq ($(MAKECMDGOALS),release_clean)
	OUTPUT_DIR := $(BASE)/$(RLS_DIR)
	OBJ_DIR := ./$(RLS_DIR)
endif

ifeq ($(BUILD_64),1)
	C_FLAGS += -fPIC
else ifeq ($(ARCH), arm)
	C_FLAGS += -fPIC
endif

CPP_FLAGS := $(CPPFLAGS) -std=c++11 $(WIDTH_FLAG) -Wno-psabi 
#LINKER_OPTION := -shared $(WIDTH_FLAG) -L$(USER_LIB_PREFIX) -L$(LIB_PREFIX) -Wl,-rpath=$(USER_LIB_PREFIX) -Wl,-rpath=$(LIB_PREFIX) -ldbus-1 -ljsoncpp -ldl -lstdc++ -lpthread
COMMON_LINK=$(shell PKG_CONFIG_PATH=$(PKGCONFIGPATH) pkg-config --define-variable=prefix=$(ROOTFS)/usr --libs-only-L glib-2.0 dbus-1 jsoncpp openssl mit-krb5)
LINKER_OPTION := -shared $(WIDTH_FLAG) $(COMMON_LINK) -ldl -lstdc++ -lpthread

ifeq ($(ARCH),arm)
LINKER_OPTION += --sysroot=$(ROOTFS)
endif

MUTE_CLEAN := 2>/dev/null || true

$(OBJ_DIR)/%.o : %.cpp
	@echo Building file: $@
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR);fi
	$(CPP) $(C_DEFINES) $(C_FLAGS) $(CPP_FLAGS) $(C_INCLUDE) -o $@ $<

$(OBJ_DIR)/%.d : %.cpp
	@if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR);fi
	@$(CPP) $(C_DEFINES) $(C_FLAGS) $(CPP_FLAGS) $(C_INCLUDE) -MM $*.cpp > $@
	@mv -f $@ $@.tmp
	@sed -e 's|.*:|$(OBJ_DIR)/$*.o:|' < $@.tmp > $@
	@sed -e 's/.*://' -e 's/\\$$//' < $@.tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $@
	@rm -f $@.tmp

