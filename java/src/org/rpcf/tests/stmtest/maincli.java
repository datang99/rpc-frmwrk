// GENERATED BY RIDLC. MAKE SURE TO BACKUP BEFORE RE-COMPILING.
package org.rpcf.tests.stmtest;
import org.rpcf.rpcbase.*;

import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.HashMap;
import java.lang.String;
import java.nio.ByteBuffer;

import java.util.concurrent.TimeUnit;
public class maincli
{
    public static JavaRpcContext m_oCtx;
    public static void main( String[] args )
    {
        m_oCtx = JavaRpcContext.createProxy(); 
        if( m_oCtx == null )
            System.exit( -RC.EFAULT );
        
        // create the service object
        StreamTestcli oSvcCli = new StreamTestcli(
            m_oCtx.getIoMgr(), 
            "./stmtestdesc.json",
            "StreamTest" );

        // check if there are errors
        if( RC.ERROR( oSvcCli.getError() ) )
            System.exit( oSvcCli.getError() );
        
        // start the proxy
        int ret = oSvcCli.start();
        if( RC.ERROR( ret ) )
            System.exit( ret );
        
        do{
            // test remote server is not online
            while( oSvcCli.getState() == RC.stateRecovery )
            try{
                TimeUnit.SECONDS.sleep(1);
            }
            catch( InterruptedException e ){};
            
            if( oSvcCli.getState() != RC.stateConnected )
            { ret = RC.ERROR_STATE;break;}
            
            /*// request something from the server*/
            String i0 = "Hello, stmtest";
            JRetVal jret = oSvcCli.Echo(i0);
            if( jret.ERROR() )
            { ret = jret.getError();break; }
            String i0r = (String)jret.getAt(0);
            rpcbase.JavaOutputMsg(
                    "Echo completed with response " + i0r);
            jret = oSvcCli.startStream(null);
            if(jret.ERROR())
            {
                ret = jret.getError();
                break;
            }
            long hChannel = jret.getAtLong(0);
            for(int i = 0; i < 100; i++)
            {
                String strMsg = String.format("a message to server %d", i);
                ret = oSvcCli.writeStream(
                        hChannel, strMsg.getBytes(StandardCharsets.UTF_8));
                if(RC.ERROR(ret))
                    break;
                jret = oSvcCli.readStream(hChannel);
                if(jret.ERROR())
                {
                    ret = jret.getError();
                    break;
                }
                byte[] byResp = (byte[]) jret.getAt(0);
                rpcbase.JavaOutputMsg(
                        "Server says (sync): " + new String(byResp,StandardCharsets.UTF_8));
                double b = i + .1;
                strMsg = String.format("a message to server %g", b);
                ret = oSvcCli.writeStreamAsync(
                        hChannel,strMsg.getBytes(StandardCharsets.UTF_8));
                if(RC.ERROR(ret))
                    break;
                if(RC.isPending(ret)) {
                    // for simplicity, we don't issue many request in parallel.
                    do {
                        try {
                            oSvcCli.m_sem.acquire();
                            break;
                        } catch (InterruptedException e) {
                            continue;
                        }
                    } while (true);
                    ret = oSvcCli.getError();
                    if (RC.ERROR(ret))
                        break;
                }
                jret = oSvcCli.readStreamAsync(hChannel,0);
                if(jret.ERROR())
                {
                    ret = jret.getError();
                    break;
                }
                if(jret.isPending()) {
                    // for simplicity, we don't issue many request in parallel.
                    do {
                        try {
                            oSvcCli.m_sem.acquire();
                            break;
                        } catch (InterruptedException e) {
                            continue;
                        }
                    } while (true);
                    ret = oSvcCli.getError();
                    if(RC.ERROR(ret))
                        break;
                }
                else
                {
                    byResp = (byte[])jret.getAt(0);
                    rpcbase.JavaOutputMsg(
                            "Server says(async): " + new String(byResp,StandardCharsets.UTF_8));
                }
            }
        }while( false );

        oSvcCli.stop();
        m_oCtx.stop();
        System.exit( ret );
    }
}