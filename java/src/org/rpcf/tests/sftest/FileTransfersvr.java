// GENERATED BY RIDLC. MAKE SURE TO BACKUP BEFORE RE-COMPILING.
package org.rpcf.tests.sftest;
import org.rpcf.rpcbase.*;
import java.io.File;
import java.lang.String;

public class FileTransfersvr extends FileTransfersvrbase
{
    String m_strRootDir =
            "/tmp/sfsvr-root/" + System.getProperty("user.name");
    public FileTransfersvr( ObjPtr pIoMgr,
        String strDesc, String strSvrObj )
    {
        super( pIoMgr, strDesc, strSvrObj );
        File path = new File(m_strRootDir);
        if(!path.exists())
             path.mkdirs();
    }
    
    // IFileTransfer::StartUpload sync-handler
    public int StartUpload(
        JavaReqContext oReqCtx,
        String strFile,
        long hChannel,
        long qwOffet,
        long qwSize )
    {
        // Synchronous handler. Make sure to call
        // oReqCtx.setResponse before return
        return RC.ERROR_NOT_IMPL;
    }
    
    // IFileTransfer::StartDownload sync-handler
    public int StartDownload(
        JavaReqContext oReqCtx,
        String strFile,
        long hChannel,
        long qwOffet,
        long qwSize )
    {
        // Synchronous handler. Make sure to call
        // oReqCtx.setResponse before return
        return RC.ERROR_NOT_IMPL;
    }
    
    // IFileTransfer::GetFileInfo sync-handler
    public int GetFileInfo(
        JavaReqContext oReqCtx,
        String strFile )
    {
        // Synchronous handler. Make sure to call
        // oReqCtx.setResponse before return
        int ret = RC.STATUS_SUCCESS;
        FileInfo fi = new FileInfo();
        do {
            String strPath = m_strRootDir + "/" + strFile;
            fi.strFile = strFile;
            File o = new File(strPath);
            if (!o.exists())
            {
                ret = RC.ENOENT;
                break;
            }
            if(!o.isFile())
            {
                ret = RC.ENOENT;
                break;
            }
            if(o.canRead())
                fi.strAccess = "r";
            else
                fi.strAccess = "-";

            if(o.canWrite())
                fi.strAccess += "w";
            else
                fi.strAccess += "-";
            if(o.canExecute())
                fi.strAccess += "x";
            else
                fi.strAccess += "-";

            fi.qwSize = o.length();

        }while(false);
        if(RC.SUCCEEDED(ret))
            oReqCtx.setResponse(ret, fi);

        return ret;
    }
    
    
}